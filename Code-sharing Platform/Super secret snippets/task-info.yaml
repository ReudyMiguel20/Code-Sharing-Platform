type: edu
files:
- name: src/platform/CodeSharingPlatform.java
  visible: true
  text: |
    package platform;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class CodeSharingPlatform {

        public static void main(String[] args) {
            SpringApplication.run(CodeSharingPlatform.class, args);
        }



    //    @Bean
    //    public CodeExamples codeExample() {
    //        CodeExamples codeBean = new CodeExamples();
    //        codeBean.setCode("xyz");
    //        return codeBean;
    //    }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    server.error.include-message=always
    logging.level.org.springframework.web=debug
    spring.output.ansi.enabled=ALWAYS


    spring.datasource.url=jdbc:h2:file:~/snippets
    spring.datasource.driverClassName=org.h2.Driver
    spring.datasource.username=sa
    spring.datasource.password=password

    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
    spring.jpa.hibernate.ddl-auto=update

    spring.h2.console.enabled=true
    spring.h2.console.settings.trace=false
    spring.h2.console.settings.web-allow-others=false
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-freemarker'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly 'com.h2database:h2'
    }
  learner_created: false
- name: src/resources/templates/test.ftlh
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>
    <body>
    <p>damn bro</p>
    </body>
    </html>
  learner_created: false
- name: src/platform/dto/PostNewCode.java
  visible: true
  text: |
    package platform.dto;

    public class PostNewCode {
        private String code;

        public PostNewCode() {
        }

        public PostNewCode(String code) {
            this.code = code;
        }

        public String getCode() {
            return code;
        }

        public void setCode(String code) {
            this.code = code;
        }

        @Override
        public String toString() {
            return "PostNewCode{" +
                    "code='" + code + '\'' +
                    '}';
        }
    }
  learner_created: false
- name: src/platform/dto/NewCodeResponse.java
  visible: true
  text: |
    package platform.dto;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    public class NewCodeResponse {
        @JsonIgnore
        private static int nextId = 1;
        @JsonIgnore
        private int id;
        @JsonProperty(value = "id")
        private String idString;

        public NewCodeResponse() {
            this.id = nextId++;
            this.idString = String.valueOf(this.id);
        }

    //    public int getId() {
    //        return id;
    //    }


        public String getIdString() {
            return idString;
        }

        public void setIdString(String idString) {
            this.idString = idString;
        }
    }
  learner_created: false
- name: src/resources/templates/specific_code.ftlh
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Code</title>
        <link rel="stylesheet"
              href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/styles/default.min.css">
        <script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/highlight.min.js"></script>
        <script>hljs.initHighlightingOnLoad();</script>
    </head>
    <body>
    <span id="load_date">${code.date}</span>
    <br>
    <pre id="code_snippet" style="border: solid black 2px; padding: 10px; display: inline-block;"><code>${code.code}</code></pre>
    </body>
    </html>
  learner_created: false
- name: src/resources/templates/post_new_code.ftlh
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Create</title>
    </head>
    <body>
    <textarea id="code_snippet" style="width: 448px; height: 68px;">// write your code here</textarea>
    <br>
    <button id="send_snippet" type="submit" onclick="send()">Submit</button>
    </body>
    </html>
  learner_created: false
- name: src/resources/templates/latests_codes.ftlh
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Latest</title>
        <link rel="stylesheet"
              href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/styles/default.min.css">
        <script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/highlight.min.js"></script>
        <script>hljs.initHighlightingOnLoad();</script>
    </head>
    <body>
    <div>
        <#list latestcodes as codeexamples>
        <span id="load_date" style="display: block">${codeexamples.date}</span>
        <pre id="code_snippet" style="border: solid black 2px; padding: 10px; display: inline-block;"><code>${codeexamples.code}</code></pre>
    </div>
    </#list>
    </body>
    </html>
  learner_created: false
- name: src/platform/entity/CodeExamples.java
  visible: true
  text: |2

    package platform.entity;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import javax.persistence.*;
    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;
    import java.util.Objects;

    @Entity
    @Table(name = "CodeExamples")
    public class CodeExamples implements Comparable<CodeExamples> {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "id")
        @JsonIgnore
        private int id;

        @Column(name = "code")
        private String code;

        @Column(name = "date")
        private String date;

        @Transient
        private String dateFormatter = "yyyy-MM-dd HH:mm:ss";
        @Transient
        private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(dateFormatter);

        public CodeExamples() {
        }


        public CodeExamples(String code) {
            this.code = code;
            this.date = LocalDateTime.now().format(dateTimeFormatter);
        }

        public CodeExamples(String code, String date) {
            this.code = code;
            this.date = String.valueOf(date);
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getCode() {
            return code;
        }

        public void setCode(String code) {
            this.code = code;
        }

        public String getDate() {
            return date;
        }

        public void setDate(String date) {
            this.date = date;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            CodeExamples code1 = (CodeExamples) o;
            return Objects.equals(code, code1.code);
        }

        @Override
        public int hashCode() {
            return Objects.hash(code);
        }

        @Override
        public String toString() {
            return "Code{" +
                    "code='" + code + '\'' +
                    '}';
        }

        @Override
        public int compareTo(CodeExamples codeExamples) {
            return codeExamples.date.compareTo(this.date);
        }
    }
  learner_created: false
- name: src/platform/service/CodeExampleServiceImpl.java
  visible: true
  text: |
    package platform.service;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import platform.entity.CodeExamples;
    import platform.repositories.CodeExamplesRepository;

    import java.util.ArrayList;
    import java.util.List;

    @Service
    public class CodeExampleServiceImpl implements CodeExampleService {
        private CodeExamplesRepository codeExamplesRepository;

        @Autowired
        public CodeExampleServiceImpl(CodeExamplesRepository codeExamplesRepository) {
            this.codeExamplesRepository = codeExamplesRepository;
        }

        @Override
        public List<CodeExamples> getAllCodes() {
            return this.codeExamplesRepository.findAll();
        }

        @Override
        public void addCodeExample(CodeExamples codeToSave) {
            this.codeExamplesRepository.save(codeToSave);
        }

        @Override
        public CodeExamples returnCodeById(int id) {
            return this.codeExamplesRepository.findById(id).get();
    //        for (CodeExamples x : getAllCodes()) {
    //            if (x.getId() == id) {
    //                return x;
    //            }
    //        }
    //        return null;
        }

        //Get the latest ten uploaded codes
        @Override
        public List<CodeExamples> getLatestCodes() {
    //        return this.codeStorage.getCodeExamplesList()
    //                .stream()
    //                .sorted(Comparator.naturalOrder())
    //                .limit(10)
    //                .toList();

            List<CodeExamples> latestCodes = getAllCodes();
            List<CodeExamples> tenLatestCodes = new ArrayList<>();

            int counter = 0;
            int latestCodesSize = latestCodes.size();


            for (int i = 1; latestCodesSize >= i; i++) {
                if (counter == 10) {
                    break;
                }
                tenLatestCodes.add(latestCodes.get(latestCodesSize - i));
                counter++;
            }

            return tenLatestCodes;
        }

    }
  learner_created: false
- name: src/platform/service/CodeExampleService.java
  visible: true
  text: |
    package platform.service;

    import platform.entity.CodeExamples;

    import java.util.List;

    public interface CodeExampleService {

        List<CodeExamples> getLatestCodes();
        CodeExamples returnCodeById(int id);
        void addCodeExample(CodeExamples codeToSave);
        List<CodeExamples> getAllCodes();

    }
  learner_created: false
- name: src/platform/repositories/CodeExamplesRepository.java
  visible: true
  text: |
    package platform.repositories;

    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;
    import platform.entity.CodeExamples;

    @Repository
    public interface CodeExamplesRepository extends JpaRepository<CodeExamples, Integer> {
    }
  learner_created: false
- name: src/platform/mvc_controllers/WebMVController.java
  visible: true
  text: |
    package platform.mvc_controllers;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PathVariable;
    import platform.entity.CodeExamples;
    import platform.service.CodeExampleServiceImpl;

    import java.util.List;

    @Controller
    public class WebMVController {

        private CodeExampleServiceImpl codeExampleService;

        @Autowired
        public WebMVController(CodeExampleServiceImpl codeExampleService) {
            this.codeExampleService = codeExampleService;
        }

        @GetMapping("/code/new")
        public String postNewCode() {
            return "post_new_code";
        }

        @GetMapping("/code/{id}")
        public String getSpecificCode(Model model, @PathVariable int id) {
    //        int id = Integer.parseInt(idString);
            CodeExamples tempCodeExample = this.codeExampleService.returnCodeById(id);
            model.addAttribute("code", tempCodeExample);

            return "specific_code";
        }

        @GetMapping("/code/latest")
        public String getLatestCodes(Model model) {
            List<CodeExamples> latestCodes = this.codeExampleService.getLatestCodes();
            model.addAttribute("latestcodes", latestCodes);
            return "latests_codes";
        }
    }
  learner_created: false
- name: test/CodeSharingPlatformTest.java
  visible: false
  text: |
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.PresentationError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.nodes.Element;
    import org.jsoup.select.Elements;
    import platform.CodeSharingPlatform;

    import java.util.HashMap;
    import java.util.Map;

    import static org.hyperskill.hstest.common.Utils.sleep;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isNumber;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class CodeSharingPlatformTest extends SpringTest {
        public CodeSharingPlatformTest() {
            super(CodeSharingPlatform.class, "../snippets.mv.db");
        }

        final String API_CODE = "/api/code/";
        final String WEB_CODE = "/code/";

        final String API_CODE_NEW = "/api/code/new";
        final String WEB_CODE_NEW = "/code/new";

        final String API_LATEST = "/api/code/latest";
        final String WEB_LATEST = "/code/latest";

        final String[] SNIPPETS = {
            "public static void ...",
            "class Code { ...",
            "Snippet #3",
            "Snippet #4",
            "Snippet #5",
            "Snippet #6",
            "Snippet #7",
            "Snippet #8",
            "Snippet #9",
            "Snippet #10",
            "Snippet #11",
            "Snippet #12",
            "Snippet #13",
            "Snippet #14",

            "Snippet #15",
            "Snippet #16",
            "Snippet #17",
            "Snippet #18",
            "Snippet #19",
            "Snippet #20",
            "Snippet #21",
            "Snippet #22",
        };

        final Map<Integer, String> ids = new HashMap<>();
        final Map<Integer, String> dates = new HashMap<>();
        final Map<Integer, Integer> secs = new HashMap<>();
        final Map<Integer, Integer> views = new HashMap<>();
        final Map<Integer, Long> creationTime = new HashMap<>();

        boolean checkSecret = false;
        long freezeTime = 0;
        long awaitTime = 0;
        long sleepDurationSec = 0;
        long sleepLowerBound = 0;
        long sleepUpperBound = 0;

        static String th(int val) {
            if (val == 1) {
                return "" + val + "st";
            } else if (val == 2) {
                return "" + val + "nd";
            } else if (val == 3) {
                return "" + val + "rd";
            } else {
                return "" + val + "th";
            }
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkTitle(Document doc, String url, String title) {
            if (!doc.title().equals(title)) {
                throw new WrongAnswer("GET " + url +
                    " should contain title \"" + title + "\"");
            }
        }

        static Element getSingleTag(Element doc, String url, String tag) {
            Elements elems = getElemsByTag(doc, url, tag, 1);
            return elems.get(0);
        }

        static Elements getElemsByTag(Element doc, String url, String tag, int length) {
            Elements elems = doc.getElementsByTag(tag);
            if (elems.size() != length) {
                throw new WrongAnswer("GET " + url +
                    " should contain " + length + " <" + tag + "> " +
                    "element"+ (length == 1 ? "" : "s") +", found: " + elems.size());
            }
            return elems;
        }

        static Element getById(Element doc, String url, String id, String tag) {
            Element elem = doc.getElementById(id);

            if (elem == null) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id \"" + id + "\", no one found");
            }

            if (!elem.tagName().equals(tag)) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id  \"" + id + "\" and tag \"" + tag + "\", " +
                    "found another tag: \"" + elem.tagName() + "\"");
            }

            return elem;
        }

        static void checkMissingId(Element doc, String url, String id) {
            Element elem = doc.getElementById(id);
            if (elem != null) {
                throw new WrongAnswer("GET " + url +
                    " shouldn't contain an element with id \"" + id + "\", but one was found");
            }
        }

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[] {
            // test 1
            this::checkWebCodeNew,

            // test 2
            () -> postSnippet(0),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiLatest(0),
            () -> checkWebLatest(0),

            // test 7
            () -> postSnippet(1),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiLatest(1, 0),
            () -> checkWebLatest(1, 0),

            // test 14
            () -> postSnippet(2),
            () -> postSnippet(3),
            () -> postSnippet(4),
            () -> postSnippet(5),
            () -> postSnippet(6),
            () -> postSnippet(7),
            () -> postSnippet(8),
            () -> postSnippet(9),
            () -> postSnippet(10),
            () -> postSnippet(11),
            () -> postSnippet(12),
            () -> postSnippet(13),

            // test 26
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 54
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 56
            this::reloadServer,

            // test 57
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 85
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 87
            () -> postSnippet(14),
            () -> postSnippet(15, 100, 20),
            () -> postSnippet(16),
            () -> postSnippet(17, 0, 5),
            () -> postSnippet(18),
            () -> postSnippet(19, 3, 0),
            () -> postSnippet(20),
            () -> postSnippet(21, 30, 0),

            // test 95
            () -> checkApiCode(14),
            () -> checkWebCode(14),
            () -> checkApiCode(16),
            () -> checkWebCode(16),
            () -> checkApiCode(18),
            () -> checkWebCode(18),
            () -> checkApiCode(20),
            () -> checkWebCode(20),

            // test 103
            () -> {
                freezeTime = System.currentTimeMillis();
                sleep(5000);
                return reloadServer();
            },

            // test 104
            () -> {
                awaitTime = System.currentTimeMillis();
                sleepDurationSec = (awaitTime - freezeTime) / 1000;
                sleepLowerBound = sleepDurationSec;
                sleepUpperBound = sleepLowerBound + 10;
                checkSecret = true;
                return CheckResult.correct();
            },

            // test 105
            () -> checkApiCode(15),
            () -> checkWebCode(15), //106
            () -> checkApiCode(17), //107
            () -> checkWebCode(17), //108
            () -> checkApiCode404(19), //109
            () -> checkWebCode404(19), //110
            () -> checkApiCode(21), //111
            () -> checkWebCode(21), //112

            // test 113
            () -> checkApiLatest(20, 18, 16, 14, 13, 12, 11, 10, 9, 8),
            () -> checkWebLatest(20, 18, 16, 14, 13, 12, 11, 10, 9, 8),

            // test 115
            () -> checkApiCode(17),
            () -> checkApiCode(17),
            () -> checkWebCode(17), //117
            () -> checkApiCode404(17),
            () -> checkWebCode404(17),
        };

        private CheckResult checkApiCode(int id) {
            String codeId = ids.get(id);
            String snippet = SNIPPETS[id];
            int time = secs.get(id);
            int views = this.views.get(id);

            HttpResponse resp = get(API_CODE + codeId).send();
            int elapsedTime = (int) (System.currentTimeMillis() - creationTime.get(id)) / 1000;

            // If execution is slow, response could rightfully be 404
            if (time > 0) {
                if (elapsedTime < time){
                    checkStatusCode(resp, 200);
                } else {
                    checkStatusCode(resp, 404);
                    //System.out.println("404 with valid timeout");
                    return CheckResult.correct();
                }
            } else {
                checkStatusCode(resp, 200);
            }


            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", snippet)
                    .value("date", isString(s -> {
                        if (dates.containsKey(id)) {
                            return s.equals(dates.get(id));
                        }
                        dates.put(id, s);
                        return true;
                    }))
                    .value("time", isInteger(i -> {
                        if (!checkSecret || time == 0) {
                            return i == 0;
                        }

                        //int upperBound = (int) (time - sleepLowerBound);
                        //int lowerBound = (int) (time - sleepUpperBound);

                        int targetTime = time - elapsedTime; // Time which should be remaining on the clock
                        final int toleranceSeconds = 3;
                        int lowerBound = targetTime - toleranceSeconds;
                        int upperBound = targetTime + toleranceSeconds;

                        return i >= lowerBound && i <= upperBound;
                    }))
                    .value("views", isInteger(i -> {
                        if (!checkSecret || views == 0) {
                            return i == 0;
                        }
                        boolean result = i == views - 1;
                        this.views.put(id, views - 1);
                        return result;
                    }))

            );

            return CheckResult.correct();
        }

        private CheckResult checkApiCode404(int id) {
            HttpResponse resp = get(API_CODE + ids.get(id)).send();
            checkStatusCode(resp, 404);
            return CheckResult.correct();
        }

        private CheckResult checkWebCode(int id) {
            String codeId = ids.get(id);
            String apiSnippet = SNIPPETS[id];
            String apiDate = dates.get(id);
            int time = secs.get(id);
            int views = this.views.get(id);

            String req = WEB_CODE + codeId;
            HttpResponse resp = get(req).send();
            int elapsedTime = (int) (System.currentTimeMillis() - creationTime.get(id)) / 1000;

            // If execution is slow, response could rightfully be 404
            if (time > 0) {
                if (elapsedTime < time){
                    checkStatusCode(resp, 200);
                } else {
                    checkStatusCode(resp, 404);
                    //System.out.println("404 with valid timeout");
                    return CheckResult.correct();
                }
            } else {
                checkStatusCode(resp, 200);
            }

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Code");

            Element pre = getById(doc, req, "code_snippet", "pre");
            Element code = getSingleTag(pre, req, "code");

            String webSnippetCode = code.text();
            if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                return CheckResult.wrong("Web code snippet " +
                    "and api code snippet are different");
            }

            Element date = getById(doc, req, "load_date", "span");
            String webSnippetDate = date.text();
            if (!webSnippetDate.trim().equals(apiDate.trim())) {
                return CheckResult.wrong("Web snippet date " +
                    "and api snippet date are different");
            }

            if (time != 0) {
                Element timeSpan = getById(doc, req, "time_restriction", "span");
                String timeText = timeSpan.text();
                int timeOnPage;
                try {
                    timeOnPage = expect(timeText).toContain(1).integers().get(0);
                } catch (PresentationError ex) {
                    return CheckResult.wrong(
                        "GET " + req + " cannot find number of seconds inside \"time_restriction\" span element.\n" +
                        "Full text:\n" + timeSpan
                    );
                }
                //int upperBound = (int) (time - sleepLowerBound);
                //int lowerBound = (int) (time - sleepUpperBound);

                int targetTime = time - elapsedTime; // Time which should be remaining on the clock
                final int toleranceSeconds = 3;
                int lowerBound = targetTime - toleranceSeconds;
                int upperBound = targetTime + toleranceSeconds;

                if (!(timeOnPage >= lowerBound && timeOnPage <= upperBound)) {
                    return CheckResult.wrong("GET " + req + " should " +
                        "contain time restriction between " + lowerBound
                        + " and " + upperBound + ", found: " + timeOnPage + "\n" +
                        "Full text:\n" + timeSpan);
                }
            } else {
                checkMissingId(doc, req, "time_restriction");
            }

            if (views != 0) {
                Element viewsSpan = getById(doc, req, "views_restriction", "span");
                String viewsText = viewsSpan.text();
                int viewsOnPage = expect(viewsText).toContain(1).integers().get(0);

                if (viewsOnPage != views - 1) {
                    return CheckResult.wrong("GET " + req + " should " +
                        "contain views restriction equal to " + (views - 1)
                        + ", found: " + viewsOnPage + "\n" +
                        "Full text:\n" + viewsSpan);
                }
                this.views.put(id, views - 1);
            } else {
                checkMissingId(doc, req, "views_restriction");
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebCode404(int id) {
            HttpResponse resp = get(WEB_CODE + ids.get(id)).send();
            checkStatusCode(resp, 404);
            return CheckResult.correct();
        }

        private CheckResult checkWebCodeNew() {
            HttpResponse resp = get(WEB_CODE_NEW).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE_NEW, "Create");

            getById(doc, WEB_CODE_NEW, "code_snippet", "textarea");
            getById(doc, WEB_CODE_NEW, "send_snippet", "button");

            return CheckResult.correct();
        }

        private CheckResult postSnippet(int id) {
            return postSnippet(id, 0, 0);
        }

        private CheckResult postSnippet(int id, int secs, int views) {
            String snippet = SNIPPETS[id];
            this.secs.put(id, secs);
            this.views.put(id, views);

            HttpResponse resp = post(API_CODE_NEW,
                "{\"code\":\"" + snippet + "\", " +
                    "\"time\": " + secs +", " +
                    "\"views\": " + views + "}").send();

            creationTime.put(id, System.currentTimeMillis());

            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isString(i -> {
                        if (i.length() != 36) {
                            return false;
                        }
                        ids.put(id, "" + i);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkApiLatest(int... ids) {
            String req = API_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(ids.length, isObject()
                    .value("code", isString())
                    .value("date", isString())
                    .value("time", isInteger(i -> i == 0,
                        "should be equal to 0 (latest snippets should not contain time restrictions)"))
                    .value("views", isInteger(i -> i == 0,
                        "should be equal to 0 (latest snippets should not contain time restrictions)"))
                )
            );

            JsonArray elem = resp.getJson().getAsJsonArray();
            for (int i = 0; i < ids.length; i++) {
                JsonObject item = elem.get(i).getAsJsonObject();

                String actualSnippet = SNIPPETS[ids[i]];
                String actualDate = dates.get(ids[i]);

                String givenSnippet = item.get("code").getAsString();
                String givenDate = item.get("date").getAsString();

                if (!actualSnippet.equals(givenSnippet)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet doesn't match actual snippet.\n" +
                        "Expected:\n" + actualSnippet + "\n" +
                        "Found:\n" + givenSnippet);
                }

                if (!actualDate.equals(givenDate)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet's date doesn't match actual snippet's date.\n" +
                        "Expected:\n" + actualDate + "\n" +
                        "Found:\n" + givenDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebLatest(int... ids) {
            String req = WEB_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Latest");

            Elements preList = getElemsByTag(doc, req, "pre", ids.length);
            Elements spanList = getElemsByTag(doc, req, "span", ids.length);

            for (int i = 0; i < ids.length; i++) {
                String apiSnippet = SNIPPETS[ids[i]];
                String apiDate = dates.get(ids[i]);
                Element pre = preList.get(i);

                String webSnippetCode = pre.text();
                if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet doesn't match " + th(i + 1) + " snippet via api.\n" +
                        "Expected:\n" + apiSnippet + "\n" +
                        "Found:\n" + webSnippetCode);
                }

                Element date = spanList.get(i);
                String webSnippetDate = date.text();
                if (!webSnippetDate.trim().equals(apiDate.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet's date doesn't match " + th(i + 1)
                        + " snippet's date via api.\n" +
                        "Expected:\n" + apiDate + "\n" +
                        "Found:\n" + webSnippetDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new RuntimeException(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/platform/restcontrollers/ApiController.java
  visible: true
  text: |
    package platform.restcontrollers;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import platform.dto.NewCodeResponse;
    import platform.dto.PostNewCode;
    import platform.entity.CodeExamples;
    import platform.service.CodeExampleServiceImpl;

    import java.util.List;

    @RestController
    @RequestMapping("/api")
    public class ApiController {

        private CodeExampleServiceImpl codeExampleService;

        @Autowired
        public ApiController(CodeExampleServiceImpl codeExampleService) {
            this.codeExampleService = codeExampleService;
        }

        //Return a list of Code Examples
        @GetMapping("/code/latest")
        public ResponseEntity<?> getCode() {
            List<CodeExamples> latestCodes = this.codeExampleService.getLatestCodes();

            if (latestCodes.size() == 0) {
                return ResponseEntity.notFound().build();
            } else {
                return ResponseEntity.ok().body(this.codeExampleService.getLatestCodes());
            }
        }

        //Return a specific CodeExample object by id
        @GetMapping("/code/{id}")
        public ResponseEntity<?> getSpecificCode(@PathVariable int id) {
            CodeExamples tempCodeExample = this.codeExampleService.returnCodeById(id);

            if (tempCodeExample == null) {
                return ResponseEntity.notFound().build();
            } else {
                return ResponseEntity.ok().body(tempCodeExample);
            }
        }

        //Post a new Code Example, add it to a list, then return a NewCodeResponse response
        @PostMapping("/code/new")
        public ResponseEntity<?> postNewCode(@RequestBody PostNewCode newCode) {
            //Creating a new CodeExample by getting the code and adding it to a list
            CodeExamples tempCodeExample = new CodeExamples(newCode.getCode());
            this.codeExampleService.addCodeExample(tempCodeExample);

            // Returning the id, need to fix this part on the next stage I suppose
            return ResponseEntity.ok().body(new NewCodeResponse());
        }

    //    @GetMapping("/code/latest")
    //    public ResponseEntity<?> returnLatestCodes() {
    //        List<CodeExamples> latestCodes = this.codeExampleService.getLatestCodes();
    //
    //        return ResponseEntity.ok().body(latestCodes);
    //    }
    }
  learner_created: true
- name: src/resources/templates/specific_code_no_restriction.ftlh
  visible: true
  learner_created: true
- name: src/resources/templates/specific_code_time_restriction.ftlh
  visible: true
  learner_created: true
- name: src/resources/templates/specific_code_views_restriction.ftlh
  visible: true
  learner_created: true
- name: src/platform/exception/CodeNotFound.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/130/stages/696/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sat, 01 Jul 2023 18:53:26 UTC"
record: -1
